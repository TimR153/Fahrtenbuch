name: Deploy to Stage

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (z.B. Commit-SHA)'
        required: true
      stage:
        description: 'Deployment stage'
        required: true
        type: choice
        options:
          - quality
          - staging
          - production
        default: quality

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key for scp
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
      - name: Copy docker-compose.yml to server
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.SSH_USERNAME }}/fahrtenbuch/
    
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            mkdir -p /home/${{ secrets.SSH_USERNAME }}/fahrtenbuch
            cd /home/${{ secrets.SSH_USERNAME }}/fahrtenbuch

            export IMAGE_TAG='${{ github.event.inputs.image_tag }}'
            export STAGE='${{ github.event.inputs.stage }}'
            export DB_USER='${{ secrets.DB_USER }}'
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            export DB_NAME='${{ secrets.DB_NAME }}'
            export AUTH0_DOMAIN='${{ secrets.AUTH0_DOMAIN }}'
            export AUTH0_CLIENT_ID='${{ secrets.AUTH0_CLIENT_ID }}'
            export AUTH0_CLIENT_SECRET='${{ secrets.AUTH0_CLIENT_SECRET }}'
            export AUTH0_AUDIENCE='${{ secrets.AUTH0_AUDIENCE }}'
            export API_BASE_URL='${{ secrets.API_BASE_URL }}'
            export KNOWN_PROXIES='${{ secrets.KNOWN_PROXIES }}'
            export API_DEPLOY_PORT='${{ secrets.API_DEPLOY_PORT }}'
            export WEB_DEPLOY_PORT='${{ secrets.WEB_DEPLOY_PORT }}'
            export DOTNET_ENVIRONMENT='${{ secrets.ASPNETCORE_ENVIRONMENT }}'

            docker compose pull
            docker compose up -d
